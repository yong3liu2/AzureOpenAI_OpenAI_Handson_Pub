[
    {
        "filename": "9503206.pdf",
        "page_number": 1,
        "page_content": "arXiv:math/9503206v1 [math.LO] 13 Mar 1995 Completeness Proof of Functional Logic, A Formalism with Variable-Binding Nonlogical Symbols Sch\u00f6nbrunner Josef Institut f\u00fcr Logistik der Universit\u00e4t Wien Universit\u00e4tsstraae 10/11, A-1090 Wien (Austria) e-mail a8121dab@helios.edvz.univie.ac.at Abstract We know extensions of first order logic by quantifiers of the kind \"there are uncountable many ... \", \"most ... \" with new axioms and appropriate semantics. Related are operations such as \"set of x, such that ... \", Hilbert's E-operator, Churche's A-notation, minimization and similar ones, which also bind a variable within some expression, the meaning of which is however partly defined by a translation into the language of first order logic. In this paper a generalization is presented that comprises arbitrary variable-binding symbols as non-logical oper- ations. The axiomatic extension is determined by new equality-axioms; models allocate functionals to variable-binding symbols. The completeness of this system of the so called functional logic of 1st order will be proved. Mathematics Subject Classification: 03C80, 03B99. 1 Introduction Functional logic is a generalization of first order predicate logic with different kinds of objects by adding the following new features: 1. The division of expressions into the categories of sentences and individuals (i.e. formulas and terms) is weakened as with a differentiation of sorts of terms formulas shall also be treated as a sort. Thus the classification of the symbolic entities into logical connectives, predicate symbols, function symbols loses its significance, as the membership to one of it depends only on its signature (i.e. number and sorts of the argument-places and sort of the resulting expression). The sentential sort (formulas) retains its special role and will be refered to as T. Thus the signature of a binary connective is '\u03c0(\u03c0, \u03c0)', that of a n-ary predicate symbol '\u03c0(\u03b1\u03b9, ... , an)', that of a n- ary function symbol 'y(x1, ... , an)' and that of a constant symbol 'y', if each di and 'y' are sorts. Not to be found in predicate logic are symbolic entities whose argument- places are mixed, partly of sort Tt and partly of another object-sort. These do not fit 1"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 2,
        "page_content": "into any of the categories of logical connectives, predicate symbols or function symbols mentioned above. An example is the expression '?(E, a, b)' denoting an object \"a if E, b otherwise\", which is built up by a symbolic entity '?' of the signature 'x(Tt, a, a)'. 2. In a formalized theory of predicate logic expressions such as {x | E}, {x E M | \u0395}, \u03b9\u03c7(\u0395), \u03b5\u03c7(\u0395), \u03bc\u03c7 (\u0395), \u03bc\u03c7 (E), jo e . dx are characterized only by an external rule x<b of translation into the language of the theory. In functional logic, however, such expressions can be generated internally by symbolic entities that bind variables. This is the essential extension of this formalism. In standardized symbolisation a symbolic entity 'op' of the resulting sort y with k argument places of signature(ai , Bi), Bi= (Bij)j:1 .. 1; (1gick) is linked with the generation rule by which 'op' if k = 0 (constant or variable) - or - 'op( .. , [(qi) :] ai, .. )' if k > 0 if ri>0 is an expression of sort y, if each di is an expression of sort ai and each qi = ( qij)j:1 .. ri is a sequence of variables of sorts-sequence Bi = (Bij)j:1 .. r\u00a1 . The case ri = 0 means that the optional part, which is written as [ ..... ], is to be dropped. This case applies if ri>0 to logical connectives, predicate symbols and function symbols in all argument-places i, only quantifiers have a signature 'T((a) : Tt)' with r1 = 1. Putting the template [ ..... ] around something is used to consider both cases ri = 0 as well as ri > 0. If if ri>0 if ri>0 ri > 0 the brackets can be erased and '[( qi) :] ai' stands for '(qi) : ai', which is an abbreviation of '(qi1, ... , qir; ) : ai'. 'qi,j' are the binding variables to 'a;'. Examples: 1. The extension of a formal Peano-system by axioms like Aplk ((x1, . . . , xk) : e, a1, . . . , ak) = e a1 .. ak ' PR(a, (y, z) : b, n) = ? (n=0, a, Apl2 ((y, z) : b, n - 1, PR(a, (y, z) : b, n - 1))) allows the representation of each primitive recursive function by a single term. (In the above schemes of axioms e, a, b, ai range over arbitrary terms and n is a number variable.) If all free variables of a and b which are not members of { 'y', 'z' } are in { 'u1', ... , 'um'}, then the term 'PR(a, (y, z) : b, n)' can be associated with a m + 1-ary function of arguments u1, ... , um, n, defined by primitive recursion from base-function (u1, ... , um) +> a and iteration-function (u1, ... , um, y, z) => b. 2. Quantifiers to variables of different sorts must be distinguished, the signature of 'Va' is '\u03c0((a) : \u03c0)'. In standardized manner, a formula 'Vx\" E' would be 'ya (x) : E)' 3. A standardized version of expressing \"the least x less than b such that E if one exists, or b if none exists\" (usually symbolized by 'ux E') is 'u<(b, (x) : E)', the signature of 'u<' being 'v(v, (v) : Tt)' if v is the sort of natural Numbers. x<b A standardized symbolic language and an ideal language for application with the same expressional ability are different. The first should be simple in order to avoid unnecessary expense in metatheoretic treatment. With regard to application this 2"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 3,
        "page_content": "simplicity can be disadvantageous. For instance in predicate calculus one symbol cannot be used with different signatures depending on the sorts of arguments it appears with. Such multiple use of a symbol became popular in programming languages, when looking at overloaded versions of procedure-names. Application of formal logics could profit from such a technique, too. For instance, consider sorts a, B and a class of models such that the range of \u00df is a substructure of the range of x, if the signature of a symbol w.r.t a certain argument-place is of sort \u00ab, then any term of sort \u00df also fits into that place. \"overloading of symbols\" may yield simpler axiom-schemes. Yet it requires change from the notion of symbol to that of symbolic entity (= symbol + signature). As a basis of meta-linguistic reference we shall take the standardized form. Results derived on this basis can easily be transferred into more flexible symbolism for practical use. Non standardized usages of writing such as that w.r.t. quantifiers shall be retained like alias clauses in our object language. Instead of overloading the various 'Va' into one 'V' and various '' to '=' we stipulate: 'Vx' stands for 'V\u00aa x' if 'X' E VAR& and 'a = b' stands for 'a - b' if 'a', 'b' E Ly. As to the logical axioms, the usual schemes of predicate calculus may be adapted, but binding of variables (significant to the axioms) is performed by symbols other than quantifiers, too. One part of the equality axioms become (Vzi 1) ... (Vzi ri ) (ai zi di bi Vi ) -> op( ... , [(xi): ] ai, ... ) \u2264 op( ... , [(yi): ] bi, ... ) if ri>0 if ri>0 where xi = Xi 1, ... , Xi ri, similarly yi, Zi, and where ai Xi designates the expression obtained from di by replacing each free occurrence of xij by zij (for 1 \u2264 j \u2264 ri) and op( ... , [(yi): ] bi, ... ) differs from op( ... , [(xi): ] ai, ... ) only by the i-th argument. Note: if ri>0 if ri>0 (1) if ri = 0, then the above sequence of universal quantifiers becomes empty; (2) If Y = T is the sentential sort, then \" is to be identified with <> (=logical equivalence). The main problem is introducing appropriate semantics to which the calculus is complete. Let \"op\" be a symbol with k > 0 argument places, at least one of them provides binding variables i.e. ri > 0 for some i : 1 .. k. At first consideration we suppose an interpretation-structure to assign to 'op' the functional mai if r(i) = 0 if r(i) > 0 i:1 .. k m(op') : [ Vi > M, Vi ={Map ( [ MB ; ; , Px; ) j:1 .. Ti (my is the range of y and Map(X, Y) = {f | f : X -> Y} = YX). But this turns out to fix too much, as assignment only to a part of the functions of Map ( II MB1 ; , Px;) j:1 .. ri will be relevant for evaluation of expressions. Nothing beyond that partial assignment you may expect to come out from the syntactic information of a consistent theory. To overcome this problem a certain restriction of the argument ranges Vi will help. The notion of a structure It must therefore be extended by a new component which assigns a selected set mg CMap( II , My ) to each sequence of sorts y, o. The selected i:1 .. m sets are characterized by some closure qualities similar to those that apply to the set of (primitive-) recursive functions, for instance constant functions and projections are to be included. In a trivial way, however, we find an extension Jn of Mt so that my= Map( II mo, My) and the interpretations of expressions by W and by m i:1 .. m 3"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 4,
        "page_content": "coincide as well as the semantic consequences m = and m. To construct a model of a consistent formal theory the method of extension to a complete Henkin Theory as in Henkin's Proof of the Completeness Theorem s. [HEN49, SHO67] is still applicable. 2 Survey As basic structure of a 1st order functional logic language we define the Fnl1 signature. Then a standardized language is specified that determines the notion of an expression 'e' of sort y. This is defined inductively by a characteristic syntactic relation of 'e' to a symbol 'op' (the root of 'e' ), argument expressions 'ai' and possibly variables 'Vij' binding 'ai'. As this relation shall frequently appear as a background premise within definitions and proofs constantly using the same arguments 'e' , 'op','ai' and 'Vi j', we introduce the abbreviation Generation-Premise. The definition of a Fnl1 - structure is based on the notion of a Fnl1 signature according to features discussed in the introduction. We shall only consider logic with fixed equality base on normal structure semantics. To derive semantics for the language from the notion of structure based on a signature, that is to establish an interpretation of the expressions (of various sorts), the usual definition as a map from variables-assignments to the domain of the sort the expression belongs to is not suitable. Instead of it now an expression 'e' will be evaluated according to a Fnl' structure It by assigning a mapping on the set of the so called perspectives of 'e' consisting of all finite sequences of variables, such that all free variables of 'e' appear within that sequence. Let y be the resulting sort of 'e' . The evaluation of 'e' based on It maps the empty sequence () into a member of the range My of y, provided that () is a perspective of 'e' (i.e. if 'e' has no free variable) and it maps a non-empty perspective ( 'u1', ... , 'um' ) of 'e' into a function of Mo1 X ... X mom > My, if 0; is the sort of the variable 'u;' (j=1, ... ). The definition will be inductive based on the background-assumption of Generation- Premise. As to the axiomatization, the logical axioms differ in shape from predicate logic only a little with regard to equality logic. But we must also take into account an extension of some notions which are basic to formulate axioms of logic, namely the notions of free and bound variables, substitution and substitutability. The axioms system together with the rules Modus Ponens and Generalization establishes the calculus of Functional Logic. The extension of this calculus by individual nonlogical axioms is called a functional logic theory. A Fnl1 structure-model of a consistent functional logic theory can be constructed as in predicate logic from an extension of that theory which inherits consistency, admits examples and is complete. (admitting examples is related to the existence of terms t for each formula o with at most one free variable x, so that Ex ( > ([x < t] is a theorem; we associate this theorem to designate t as an example, if 3x o is true. ) In Henkin's proof this is achieved in two steps: The 1st extension produces a theory that admits examples by addition of constant symbols and special axioms (s. [HEN49, SHO67, BAR77]). Consistency continues as this extension is conservative (each theorem of the extended theory, if restricted to the original language, is also provable within the original theory). The 2nd extension by Lindenbaum's theorem enlarges the set of nonlogical axioms without changing the language. Both extensions can easily be adapted to functional logic. The definition of a \"term structure\", which shall prove to be a model of the constructed extension to a closed Henkin Theory and hence also a model of the original theory, 4"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 5,
        "page_content": "also relies on a so called norm function that assigns a representative to each closed expression within a congruence class. This class will be defined by the congruence relation, that applies to 'a' and 'b' iff 'a = b' is a theorem of the extended theory. As we suppose completeness of the extended theory, there are exactly two congruence classes of expressions of sort Tt ; hence we choose the constants A and Y (representing true or false respectively) as values of the norm function of formulae. Upon the set of norms (i.e values of the norm function), which is a subset of closed expressions to each sort as base-range, we then define our so called term-structure. The model quality of this structure will be obtained as an immediate consequence of a theorem (by specialization). The claim of this theorem is that the evaluation of an expression 'e' by the term-structure & is a function which assigns to each perspective a mapping from a cartesian product of certain ranges .. No. .. to Fy, which can be described exclusively by application of multiple substitution (variables by terms) from 'e' and application of the norm function. The validity of a formula (= expression of sort Tt) within a model means that its interpretation maps one (and implicitly all) non-empty perspectives into a constant function of value M(Y). In case of a closed formula this implies that the empty perspective is assigned the value ?(Y). If & takes the place of m, m(Y) changes into Y (= x(Y)). By applying the preceding theorem to an 'e' of sort It and taking into account that equality of the sort It and logical equivalence become one and the same ('' = '>' ), you easily conclude the equivalence of 'e' being valid in the term-model and being deducible in the extended theory. As we refer to an extension, the restriction of & to the language of the original theory is also a model of this theory. This confirms the satisfiability of that theory on the assumption of its consistency. 3 Signature and Language 3.1 Definition Fnl1 Signat S : The notion of \"S is a signature of 1st-order functional logic\" is determined by the following key-components: SRTs: sorts; SOPs: symbolic operations; VSRTs: sorts for which variables and quantification are provided. VARs: variables; signs: signature map, signs 'op' = (Y, a, B) for 'op' E SOPS U VARs charac- terizes 'op' as a symbolic operation to generate expressions of sort y from n argument- expressions of sort xi, that might be bound by ri variables of sorts Bij. Significant for the notion to be defined is also a distinguished sort Tt (the type of formulae) and dis- tinguished elements of SOPs : 'Y' , ' \u3145 ','-', '\u2192', '^', 'V', '<>', '\u03b1\u2019 , \u2018]\"' (for each \u00ab of VSRTs) and '' (for a E SRTs) with fixed values relative to signs. In formalized manner now we stipulate all characterizations of this definition as follows: Fnl1 Signat S < > Conjunction of the following attributes : S = (SRTs, SOPs, VSRTs, VARs, signs) VSRTS & SRTS VARs n SOPs = \u00d8 signs : (SOPS U VARS) -> SRTs \u00d7 U( SRT\u2122 \u00d7 VSRT*1 ) m (V'V' E VARs) signs 'v' E VSRTS x {} SOPS U VARs can be well-ordered1) (V & E VSRTs) ( { 'V' E VARs | signs 'v' = (a, {}, {} is enumerable ) TE SRTS 'r ' , '1 ' , '- ' , ' > ' , 'A' , 'V ' , 'H' E SOPS (V & E VSRTs) 'V\" , ' ' E SOPS (V & E SRTS ) '' E SOPS 5"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 6,
        "page_content": "signs for the distinguished members of SOPs is specified by a circumscription signs, (s. auxiliary notations below) : op signs 'op' r,1 - > , A, V , <> '\u03c0' '(\u03c0)\u03c0' (\u03c0, \u03c0) \u03c0' Va, Ja '((\u03b1)\u03c0) \u03c0' for x E VSRTS 811 (a, a)T' for x E SRTS Auxilary Notations (dependent components) to a given Fnl1 Signat S: (Va E SRTs ) COPS={'c' E SOPS | signs 'c' = (a, (), <>) } alias COP a constants (V& E VSRTS ) VARS ={ 'V' E VARs | signs 'v' = (a, {}, {} _ VAR variables (V\u1ee1 = (fi) i:1 .. 1 E VSRT* ) VARS a1\u00aa VARa = [] VARO; = i:1 .. l = {\u016b | \u016b = (ui) i:1 .. 1 A (Vi: 1. . 1) 'ui' E VARo; } For signs we use a circumscription that is more convenient for application: signs : SOPS U VARS -> (SRTS U { '(', ',' , ')'})* (V'op' E SOPS U VARs ) signs 'op' = (Y, a, B) if if m =0 J'ai' '(Bi 1, . , Biri ) xi' if ri > 0 signs \u2018op' = 1 '(01, .. , 0m)Y' if m > 0 'O' = if ri = 0 I. Notational Clauses (1) Subscript S will be omitted (SRT for SRTs, ... , VARa for VARS) if only one Fnl1 Signat is considered. (2) a, B, Y, ... , ai, Bij, ... denote mem- bers of SRT. (3) u, ... , z, ui, ... , Vij, ... denote members of VAR. (4) Symbols with an arrow-accent refer to a finite sequence and writing such symbols one after the other denotes the concatenation of the sequences (if p = (p1, ... , pk) and q = (q1, ... , q1) then pq = (p1, ... , pk, q1, ... , qu) ). (5) If such a symbol e.g. u appears inside a quoted string, as for instance 'op((u) : a)', it denotes the string 'u1, ... , ul', which is the concatenation of each 'ui' with ',' interspearsed. (6) We shall always assume a = (ai) :1., B = {i}:1. , Bi = {Bij)j:1 .. r . 3.2 Definition (Es) YESRTS Let S be a Fnl1 Signat . The standardized language of S is introduced as a mapping on SRTs by stipulating for each y E SRTs the set ES of expressions of sort y inductively as follows (by above clause (1) [ [}): ' E Ly \u00ab> (}'op', m, y, a, B, a, v ) (Generation-Premise) 1) This is needed only to prove completeness independent of the axiom of choice. 6"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 7,
        "page_content": "where Generation-Premise abbreviates the conjunction of the following formulae: 'op' E SOP U VAR sign 'op' = (Y, a, B) & E SRT\u2122 BE II VSRTT (a, B rely on above I.(6)) i:1 .. m a = {'a'>i:1 .. \u20ac | La (each 'a{' { [x) = {\\:1 .. \u20ac | VARB; i:1 .. m i:1 .. m Vi (vi = \"Vij');1 ...; A (V1 <j << < ri ) 'Vij' + 'Vik') if m = 0 \u2018op' 'op( ... , [(vi): ] ai, ... )' if m > 0 ' = { if ri>0 This definition characterizes the expression 'e' as a chain of symbols which is produced by a symbolic operation 'op' either exclusively (constant or variable) or together with argument-expressions 'ai' (i : 1 .. m) possibly accompanied by binding variables vi ('e' E Ly is composed of smaller expressions 'a{' E [x;). In predicate logic binding variables vi are only provided for the two quantifiers, but expressions which are built up by another symbol 'op' are either of shape 'op' or 'op(a1, .. , am)'. Even in application of functional logic binding variables will be rare and never appear in front of more than one argument of a symbolic operation. The above definition is a prerequisite to almost all remaining conceptions of this article, always refering to the formula abbreviated by Generation-Premise. 3.3 Definition Ls = U Ly YESRT ( O ESRTe ) La = II Loi i:1 .. \u20ac 4 Semantics of Functional Logic 4.1 Definition Fnl1 Structures A : It is a Fnl1-type normal structure of signature S, iff the following conditions apply to it: i) Fnl1 Signat S = (SRT, SOP, VSRT, VAR, sign) ii) It is a mapping defined on SRTU(SRTX VSRT*)USOP. This mapping assigns ele- ments of SRT to corresponding ranges, members of SOP to symbol-interpretations (i.e. corresponding elements of or functions on such ranges or functionals in case of symbols that bind variables). To ordered pairs of SRT X VSRT* it assigns those components which determine the classes of functions admitted as arguments of the letter functionals. 1) (V& E SRT) m(x) = Mx + \u00d8 and we automatically extend ? to SRT *: (vo={{>i:1.e \u2208 SRT* ) m(d) alias M a def II Moi i:1.l 2) (V'op' E SOP, sign 'op' = {Y, a, B) (using m& alias m(a, Bi) if m = 0 then m'op' E My, otherwise M'op': i:1 .. m 3) For arbitrary y E SRT, & = (i) i:1 .. e E VSRTe 7"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 8,
        "page_content": "3.1) { = 0 > m(Y, o) = m(r) {}) l > > m(v, o) C Map(3, 3)}) alias notation: m\u1ef9 der m(y, o) der mata completion qualities of m\u1ee1. 3.2) (Vw Emy ) csto der X H> W (constant funcs.) (Vj : 1 .. e ) pjo def (Xi); \"> Xj (projections) 3.3) (Vp E VSRT* ) (VX E M\u1ee1) Vg if g E map then g= = DIGG 1 T g (xF) \u20ac m\u1ef9 (partial fixing) 3.4) (V'op' E SOP , sign 'op' = (Y, a, B) ) (Vg1, ... , gm ) the premises m > 0 , { > 0 and (Vi:1 .. m) h\u00bf = gi Mo -> Map (MtBi , Mai ) \u00ff H giy = [Z ++ g; (yz)] 16 and introducing the auxiliary notation: if ri = 0 if ri > 0 (3.3 implies hay \u20ac mb) imply m\u1ee1 > I 17 M'op' (h1 (y), ., hm(y) \u20ac m\u1ef9 (composi- tion) What It assigns to the fixed components of S : 4) Mr = {{\\', 'Y'} == {0}, 1} and (mA, m'x', mY', ', 'A',mV) == (B,Ox, 18, 8,18,\u0baa\u0b9c) forms a Boolean algebra with two elements, 2 | > |' and } | <> |' are rep- resented by the (dependent) truth-operations Ty und Hy. M'y' and ' are defined for \u00ab E VSRT as follows: if (Vx \u20ac mx) 0(x) = 1; then m'y (0) = 13 otherwise m'y () = 0; if (=x E Ma) 0(x) = 1 then m'a' (0) = 13 otherwise m'a' (0) = 02. 5) (Va ESRT) mm(a)}, {x, y) > 13 if x = y or On; otherwise To extend a structure It into an interpretation of the language, i.e. to find an eval- uation of expressions Ly another approach than that based on variables-assignments as in predicate logic is required. The following definitions are prerequisites for the new approach. 4.2 Definition persp: [s > (VAR) (Let Fnl1 Signat S, Es = U Ly) YESRT For 'e' E Ls, persp'e' denotes the set of all ('u'> i:1 ... E VAR\" such that all free variables of 'e' are in { 'u' | 1 < i > {}. 8"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 9,
        "page_content": "We shall need a more technical approach in defining this conception using syntactic induction. If Generation-Premise (Def. 3.2 on page 6) is assumed, then persp'e' depends on persp 'ai' as follows: cases m = 0 'op' E VAR 'op' \u00a2 VAR m >0 persp'e' = {'u'):1 ... \u20ac VAR* | (3) : 1 .l ) 'op' = 'u' } VAR* {TE VAR* | (Vi : 1 .. m ) uvi E persp 'ai'} 4.3 Definition (Let Fnl1 Signat S, \u00fc E VAR*) (Y E SRT) {}[u] = {' E Ly | u E persp'e' } (\u1ee1 E SRT') La[u] = II Lo [u] Ly[u] is the set of expressions of Ly whose free variables are among { 'ui' | i : 1 .. e} i:1 .. l if u = {'u')i:1 .... [y] therefore is the set of closed y-expressions. 4.4 Observation (for Fnl1 Signat S): Ly = U Ly[u] TEVAR* 4.5 Observation (for Fnl1 Signat S u = {'u') :1 ... E VAR~ ~ \u20ac VSRT*): ' \u20ac Ly[u] \u00ab> (='op', m, y, a, B, a, v ) (persp. GP) where persp.GP (=perspective G.P.) can be obtained from Generation-Premise (p. 6) by modification of two conditions: if we change 'op' E SOP U VAR into 'op' E SOP U U { 'u' | i : 1 . {} and de La into de ]] [[v] (each 'a{' E {{[v]). i:1 .. m 4.6 Definition Interpretation of the language into a structure Let Fnl1 Structures mt, Y E SRT, 'e' E Ly and Generation-Premise be assumed. The evaluation 'e'm of 'e' is defined to be a function on persp'e'. Let u = {'u') i:1 .. . \u20ac persp 'e' , (Vi : 1 .. . ) sign 'u' = '0' , o = {0;)i:1 .. m. Then 'e'm(u) is defined inductively: cases 'e' m(\u016b) = = m'op' l = 0 m = 0 (\u016b = ()) m >0 = M'op'({ 'ai'm (vi) i:1.) L =pjf = (Xi); \"> XK where k = max j('uj' = 'op') 1 > 0 m = 0 'op' E VAR j:1 .. 0 'op' E SOP = cston'op' = x \"> Drop' m >0 X => M'op' ((hi (x)) i:1 .. m with hi de- fined below by *) *) (case { > 0, m > 0) (Vi : 1 .. m ) hi : m= > Mx, if ri = 0: h : > > 'ai'm (u) (X) 1 if ri > 0 then h; : > >> ('ai'm(uvi)} = Mai . y +> 'ai'm (uv\u012f ) (xy) 9"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 10,
        "page_content": "4.7 Proposition 'e' E Ly[u] A OE VSRT* Au E VARa > 'e'm (u) Em Proof (+ Remark). This proposition is already required for the argument expres- sions 'ai' of the preceding definition (4.6) to assert that (hi(x))i:1 .. m belongs to the domain of M'op' (this assertion also requires (3.3) of 4.1 def.). Conditions 4.1(3) im- ply that the above proposition propagates from the 'ai' to 'e'; so syntactic induction ensures its validity and any circularity of 4.6 def. that might result from presupposing it (for ai) is avoided as well. 4.8 Observation If m, n & Fnl1 Structure (VY E SRT) My = \" and 08 (V'op' E SOP, sign'op' = {Y, a, B) (the II mpi - C i:1 .. m i:1 .. m then (V'e' E U Ly) 'e'm = 'e'n \u2018op'(h) (for m = 0, 5 = > : Mop'(h) = Nop'(h) YESRT Proof. syntactic induction on 'e' 4.9 Conclusion If m is characterized by VY m = m VY, o Mm and V'op' ( II mai) 1 Top' = mop' then (V'e' E U Ly ) 'm = 'e'm. i:1 .. m YESRT 5 Syntactic Matters and the Calculus of Functional Logic The logical axioms depend on the syntactic notions free variables, bound variables of an expression 'e' E Ly, substitutability and substitution (of a variable in an expression for some term). 5.1 Notation [a] symbolizes the set of components of an arbitrary finite sequence a (if a = {'a{') i:1 .. e, then [a] = { 'a{' | i : 1 . . {} ) 5.2 Definition frV 'e' , bdV'e' (free and bound variables in 'e' E Ly). Provided that 'e' E Ly and Generation-Premise we define inductively: cases frV'e' = bdV'e' = m = 0 m >0 {'op'} n VAR U (frV'a{' \\ [vi] i:1 .. m i:1 .. m U (bdV 'aj' U [v]) \u00d8 Remark: If 'op' E VAR then { 'op'} n VAR = {'op'}, otherwise { 'op'} n VAR = \u00d8. 5.3 Observation (1) 'e' E Ly [u] > 'e' E Ly A frV 'e' { [] (2) 'e' E Ly [u] > ([u] [W = > frV 'e' nW = \u00d8) 5.4 Definition Substitutability: Subb C Ls x VAR X LS 10"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 11,
        "page_content": "Generation-Premise -> Subb( 'd' , 'x' , 'e' ) <> \u2190 (vi:1 .. m) ('x' \u2208 [vi] \u221a (Subb('d', 'x', 'at' ) ^ frV 'd' \u2229 [v] =\u221e)) 5.5 Notation 'e[x + d]' alas 'ex' denotes the result of replacing each free occurring 'x' by 'd' applied to 'e'. This is a special case of next Definition (with l = 1). 5.6 Definition 'e[x < d]' alias 'e' (for ' \u20ac Ly, \u1edf = (vi):1 .. \u20ac VSRT , X = {'X'):1 ... E VAR&, d = {'d;'>{:1 .. \u20ac [ ) denotes the result of simultaneously replacing each free occurring 'xi' by 'di' (i : 1 .. e) applied to 'e'. If a variable appears more than once within the sequence x, the rightmost di of the corresponding position replaces the variable. This is defined inductively: if Generation-Premise is supposed, then cases \u2018e[x\u2039 \u20ab]' = m = 0 'op' \u20ac [x] = 'dk' with k = maxj: 1 .. e ('op' = 'xj' ) otherwise = 'op' (= 'e' ) m >0 if ri>0 = 'op( ... , [(vi): ] a[xvi < dvi], ... )' Substitution [XV; < dvi] differs from [X < d] exactly if the sequences X and V\u1ecb have common members. If 'xi' = 'Vij' then the replacement of xi by di is prohibited in the substitution [XV; < dvi]. This prevents replacing bound variables. II. Notational Clause Inside of [ ... { ... ] an identifier a for any expression 'a' E La denotes the sequence {'a') of length 1. E.g. e[xyz > abc] is to be read as e[x('y'> < a{ 'b')c]. Laws of substitution enumerated within the subsequent five lemmas shall prove to be essential prerequisites for propositions concerning the term structure obtained from a consistent theory in our final section. The proofs of these (intuitively clear) lemmas 5.7 to 5.11 mainly rely on syntactic induction using Generation-Premise. 5.7 Lemma Let 'e' E Ly p, o E VSRT u E VAR CE La. If frV 'e' n[u] = O then 'e[u < c]' = 'e' . This is a special case of the next 5.8 Lemma Let 'e' E Ly y E VARA DE VAR, n, pe VSRT FEL SEL. If frV'e' n [u] [ [y] then 'e[uy + rs]' = 'e[y + s]'. Proof. From the premises (i) frV'e' n [u] [ [g] (ii) Generation-Premise and (iii) induction hypotheses we shall infer the succedent left =right. Case m = 0. Then 'e' = 'op' and frV'e' = { 'e' } n VAR. By (i) and the fact, that [u] [ VAR we obtain (iv) { 'e' } n [u] [ [g] 11"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 12,
        "page_content": "Case 'e' E \u013c\u016by]. Then (iv) implies (v) 'e' E [y]. According to 5.6 def., case 'op' E [ ... ], on the preceding page we have (vi) left = 'e[uy < rs]' = pjk(rs), where k is the maximal within range 1 . . . lon, so that pjk (uy) = 'e'. (v) implies that (vii) k = lp+j, where is the maximal within range 1 ... IT so that pj; (y) = \u2018yj' = 'e' . (vi)+(vii) yield left = pjes+j(rs) = 'sj' and right = 'e[y < s]' = 's;'; left = right. Case 'e' \u00a2 [uy]. According to 5.6 def., case 'op' { [ ... ], on the page before left = right. Case m \u00a5 0. (iv) (frV'ai'\\[v])nucy from (i), 5.2 def.of frV on page 10 as A C B implies A U [vi] [ BU [vi] (v) frV'ai' n [u] [ [y] u [v] = [gv;] (vi) left = 'e[\u016by +- \u012bs]' 5.6 'op(_[(vi): ] a [uyvi < rsvi]_)' if ri>0 = 'op(-[(vi): ] ailyv; \u2190 svi] __ )' (iii)+(v) if ri>0 5.6 'e[] + s]' = right 5.9 Lemma Let 'e' ELY XE VARE SE VART E, DE VSRT FEL If U frV 'r' n ([y] U bdV 'e' ) = \u00d8 then 'e[xy < r's]' = 'e[xy < ryly < 5]' . j:1 .. l. Remark If TE LEI, then the last condition is true. Proof. From the premises (i,ii,iii) we shall infer left = right (succedent of the lemma). (i) premises of lemma; (ii) Generation-Premise; (iii) induction hypothesis Case m = 0. Then 'e' = 'op' Case 'e' \u00a2 [xy]. Then left = 'e' = right (according to 5.6 def. on the page before) Case 'e' E [x] [y]. Then left = 'm', where m is the maximal m { {{ so that 'e' = 'Xm'. Hence right = 'mly < s]'. (i) and 5.7 yield right = 'm'; left = right Case 'e' E [y]. Then left = 'sm' where m is the maximal so that 'e' = 'ym', hence right = 'ymly < s]' = 'Sm', left =right. Case m > 0. Now the premises (ii), (iii) become relevant. Again we infer left =right. (iv) left = 'op( __ [(vi): ] a; [xyv; \u2190 isvi] __ )' if ri>0 As [vi] [ bdV'e' (i) implies U frV 'rj' n ([gvi] UbdVe) = \u00d8, then (iii) j:1 .. l. yields (v) 'a;[xyv; \u2190 rSvi]' ='a;[xyv; \u2190 ryv;][jv; \u2190 svi]' Substituting in (iv) and application of 5.6 yield 12"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 13,
        "page_content": "(vi) left= 'op( __ [(vi): ] a;[xyv; \u2190 ryv;] __ )[yj\u2190 s]' if ri>0 = 'e[x] + \u0159y] [\u00fd + s]' = right 5.6 5.10 Lemma Let 'e' E Ly X E VAR y E VARA P, JE VSRT '' EL. \u2018e[x] +- r\u012b] = [\u2018e' [ 'e[x < r]' if 'x' \u00a2 [y] if 'x' E [y] Proof. Again rely on Generation-Premise and use induction, the result then comes immediately from 5.6 def. For the purpose of proving the next lemma we observe Sublemma 1 Let 'e' ELY XE VARE SE VART E, DE VSRT FEL. If [x] ^ [j] =\u03a6 then \u2018e[xy \u2190my]' ='e[\u2190]' 5.11 Lemma Let 'e' E Ly XE VARE DE VAR, E, HE VERT CELE . If [x] n [y] = \u00d8 then 'e[xy + cd]' = 'e[x + c][y + d]' = 'e[y + d] [x + c]'. Proof. Proving the sublemma is as easy as for the previous lemma. For the current lemma two equations are considered. From 5.9+remark and the preceding sublemma we immediately obtain the first ( 'e[xy + cd]' = 'e[x + c][y + d]'). in order to enable the induction step for the second equation we prove more generally for arbitrary E VAR* ( *) 'e[xy\u016b + cdu]' = 'e[yx\u016b + dou]' Assume premises of the lemma, Generation-Premise and induction hypothesis. Case m = 0. Then 'e' = 'op' Case 'e' \u00a2 [xyju]. Then left = 'e' = right (according to 5.6 def. on page 11, 2nd line of the table) Case 'e' E [u]. Then 'e' = 'up'. From 5.6 def. (1st line of the table) and the observation, that the rightmost occurrence of 'e' within xyu belongs to u we infer left = pjex+ly+p (xju) = 'up' = 'e'. and by obvious symmetric consideration right = 'e' . Case 'e' \u2208 [x] \u3001 [u]. Then, as [x] n [y] = \u03a6 is assumed, 'e' lyu] and 5.6 def., 1st line of table yields left = 'Cm', where m is the maximal m { {{ so that 'e' = 'Xm'. Then ly + m is the corresponding position for right, i.e. right = pjeg+m(dcu) = pjm(c) = 'cm'; left =right. Case 'e' E []] [u] is obviously similar to the preceding case (exchange x with y as well as left with right) 13"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 14,
        "page_content": "Case m > 0. From Generation-Premise and 5.6 def., 3rd line of table we obtain left= 'op(_[(vi) : ] a[xyjuv; < cduv{]_)' if ri>0 right= 'op(_[(vi): ] ailyxuvi + douv;]_)\" if ri>0 Replacing the argument-expressions according to the induction hypothesis ( 'ai' in place of 'e' and \u016bvi in place of u) yields left =right. III. Notational Clauses (1) We write 'Vx' for 'Ve x' if 'x' E VARE, and (2) 'VZ' for 'Vz1 ... Vze' if Z = {'z'):1 ... This includes case l = 0, as for u = () 'VuQ' = '+' is stipulated. (3) 'a = b' is an alias for 'a - b' if a, b E Ly. 5.12 Calculus of Functional Logic Fnl = Fnls is defined for Fnl1 Signat S as a triple of the component sets formulae, axioms and rules specified as follows: Formulae LT (s. 3.2 on page 6). Axioms Propositional Tautologies ; Predicate Logic Axioms Like in 1st order predicate logic but related to the extended notions of free vars., bound vars., substitutability and substitution. The Axioms are 'Vx q > Px' , 'qx -> =x Q' (meta condition Subb( 'a' , 'x' , '' ) provided) x(4)(Vx()', \u2018Vx(>>) >(3x(>>)' (if 'x' \u00a2 frV'\\'). Equality Axioms (I1) 'a \u00aa a' (for & E SRT, 'a' ELx) (12) 'VZ b1 [X < z] % byly < z] > op(A, [(x) :] b1, T) \u2265 op(4, [(y) :] b2, T)' if ri>0 if ri>0 where 'op' E SOP , sign'op' = {Y, a, B) X, y, z E VAR3 b1, b2 EL x; [z] n (frV 'b1' UfrV 'b2') = \u00d8 and A and I may be further arguments or empty. Rules Detachment 'p', '(>>) > '' and Generalization : '(' > 'Vx (' ( 'p' , '' ELT , 'X' E VAR ) Remark: For & E VSRT scheme (I1) could be replaced by a single axiom 'x = x' (for one fixed 'x' E VARa). 5.13 Notation '41', ... , 'Pm' }} '\\' (m \u2265 0) is used for \" can be inferred or deduced within the calculus Fnls augmented by premises or additional axioms Q1, ... , Pm if m > 0\". We shall write only | for Is if reference to S is clear. 5.14 Laws of equality (Let a, b, c E Ly) (13) - \u2018a = b > b = a' (14) }'a=b > b =c -> a = c' Proof. (13) < a \u5170 b \u2192 (a\u2267 a) \ud504 (b \u5170 a) (symmetry of equality) (transitivity of equality) 14 is an inst. of (12), -> a a > b\u0142a as '' coincides with \">' interchanging the premises by virtue of a propositional tautology and detaching a = a yields (13) a b \u2192 (a \u2267 c) \ud504 (b \u5170 c) is an instance of (12) as '\" coincides with '<>' (14) = > b = c > a = c"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 15,
        "page_content": "5.15 Equality Theorem Let 'e' EL 'r', 's' EL E VAR and 'z' E VAR. (15) If bdV 'e' nfrV 'r = s' ( [y] then |- 'vy (r = s) > e[z < r] = e[z + s]' Proof. Assume (1) the premises of the theorem, (2) Generation-Premise, (3) induction premise, then we observe 'e' = 'op( ... , [(vi): ] ai, ... )' and infer the succeeding if ri>0 (4) bdV'e' = U (bdV 'a{' U [vi]) by 5.2 def on page 10; i:1 .. m therefore bdV 'ai' & bdV'e' , from (1) we obtain (5) bdV 'ai' nfrV'r = s' \u2103 [y]; (6) 'e[z < t]' = 'op( ... , [(vi): ] a[zvi \u2039 Evi], ... )' if ri>0 by 5.6 def. on page 11 (with 't' intended to be replaced both by 'r' and 's') case 'z' \u20ac [v;]: 'ai[z,vi \u2190 t, vi]' = 'ai' by 5.10 lemma on page 13 'ai[z,vi \u2190 r, vi]'= 'ai[z, vi \u2190 s, Vi]' hence - 'ai[z, vi + r, vi]= ai[z, vi + s, vi]' (instance of (I1)) - 'Vy (r = s) > a[z < r] = a[z + s]' by (3) case 'z' \u00a2 [vi]: 'ai[z, vi < t, vi]' = 'a{[z < t]' from 5.10 lemma on page 13 [vi] nfrV 'r = s' \u2103 [y], [vi] nfrV 'Vy (r = s)' = \u00d8 from (1)+(4) - 'Vy (r =) > Vvi (a[ r] = a[z < s]' from the preceding 2 lines Both cases yield \u535c 'vy (r = s) \u2192 Vvi (ai[z, vi \u2190 r, vi] = ai[z, vi \u2190 s, vi])'. Let 'P' = '[(vi): ] pi' 'pi' = 'ai[z, vi \u2190 r, Vi]' 'Qi' = '[(vi): ] qi' 'qi' = 'ai[z, vi \u2190s, wi ]' if \u012b\u00a1>0 if ri>0 Then H- 'Vy (r = s) -> Vvi (pi = qi)' H 'Vvi(pi = qi) -> op(P1, .. , Pi-1, Pi, Qi+1, ... ) = op(P1, .. , Pi-1, Qi, Qi+1, ... )' By chaining these implications and using (14) on p. on the preceding page we obtain H 'V\u00fd (r = s) -> op(P1, . . . , Pm) = op(Q1, ... , Qm)' note that 'op( ... , Pi, ... )' = 'e[z < r]' and 'op(., Qi, ... )' = 'e[z < s]', - 'Vy (r = s) > e[z < r] = e[z < s]'. This concludes the induction step. hence 5.16 Corollary (Equality Rule) 'r = s' |- 'e[z < r] = e[z + s]' 6 Formalized Theories Throughout the paragraph we assume S E Fnl1 Signat . 6.1 Definition A functional logic theory is an extension of the calculus Fnls by adding a set J C Es to the axioms. The resulting system is symbolized by Fnls [J]. Members of J are called nonlogical axioms of the system. (We shall often refer to Fnls [J] when using J) 15"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 16,
        "page_content": "6.2 Notation Tls 'P' iff there is a proof of 'o' within the formal system Fnls [J]. (alias o is a theorem of J, or can be inferred from J) We shall omit S and write JI- '' instead if only one S is considered. In the sequel we shall always assume Fnl1 Signat S. 6.3 Definition Consistent(J) <> J CC, AJK '1' 6.4 Compactness Theorem Each theorem of J C LT is inferable from a finite subset of T, that is J Cx \u2192 TH- 'Q' <> \u25b3 (\u25b3 CT A finite(\u25b3) \u25b3 \u25b3 'Q' ) Proof. A (formal) proof only comprises a finite number of axioms, hence only a finite subset of J. 6.5 Definition T is called complete relative to S, if J C ES and each closed formula of S is decidable in J, that is Completes (J) > T } \\ (V '' { [][] ( J] '&' V T } '(' ) (Dependency from S is significant, but we shall omit S if confusion is impossible) 6.6 Definition S1 [ S2 symbolizes (for Fnl1 Signat S1, S2): \"S2 is an extension of S1\", i.e. all components of S1 and S2 but SOP and sign agree, SOPs, \u00a7 SOPS2 and signs, = SOPS1 1 signs2 . 6.7 Deduction Theorem (a special form) Proof. see [SHO67], p.33 6.8 Theorem of Lindenbaum For a consistent theory a consistent complete simple extension exists. TCL A Consistent(T) > J2 (JJ2 A Consistent(J2) A Completes (J2) Proof. By 3.1 Def. of Fnl1 Signat SOPS U VARs can be well-ordered. This implicitly applies to the sets of expressions Ly and LAI (= set of closed formulae), too. Hence we may suppose an ordinal enumeration {'Px'> xEK of LTI, that is (1) ETl={'x' | < < k} We claim the following Lemma: (2) VJVY' (JCC, A 'V' ECHI A Consistent(J) > For if the opposite is assumed, then - Consistent(JU { ''}) and > Consistent(JU {}} V Consistent(JU {} ) - Consistent(JU { '-y' }). By 6.3 then JU { 'y' } } 'x' and JU {'y'} } 'x'. By 16"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 17,
        "page_content": "6.4 (compactness theorem) and the premise Consistent(J) we conclude that there are 'X1', ... , 'Xk', '01' , . . . , 'Og' so that { 'X1' , . . . , 'Xk' , '01' , . . . , '0'} {J, { 'x1', ... , 'Xk', 'y'} + 'x' and { '01', ... , 'Or', '-y'} } 'x'. With 6.7 (deduc- tion theorem) we obtain { 'X1', ... , 'X' } '> > \\' and { '01' , ... , 'Or'} + ' > \\'; thus { 'X1' , . . . , 'Xk', '01' , . .. , 'O' } \\ '\\', that is - Consistent(J) in contradiction to the above premise. This confirms (2) Lemma. Using (1) we inductively define an ordinal sequence (Tx) &EK+1: (3.1) To= EAXT (3.2) Ja+1 = \u03a4\u03b1\u03c5{'-\u03c6\u03b1'} otherwise JJQU {'(x'} if Consistent(\u03a4\u03b1 U {'\u03c6\u03b1'}) (3.3) JA= UJ\u0118 for a limit ordinal \\ \u20ac (K + 1) \u03be\u03b5\u03bb we observe (4.1) Consistent(To) (4.2) x E K > Consistent(Tx) > Consistent(Ja+1) (4.3) limit ordinal \\ \u20ac (K + 1) / (Va E A ) Consistent(Ja) -> Consistent( U Ja) XEX If - Consistent( U Ja), then by 6.4 (compactness theorem) there are Subproof. \u03b1\u03b5\u03bb \u201801', .... 'Ok' so that (*) '01', .... 'Ok' \u20ac U T\u03b1 ^ { '1', ., '0x'} } 'X'. Thus, XEX there are x1, ... , ak < A, so that (Vi : 1 .. k) O; E Ja, . Let B = U &; then also B < A and { '01' , ... , 'Ok'} JB, due to (*) then - Consistent(TB ) contradicting the i:1 .. k antecedent of implication (4.3). This confirms (4.3). By ordinal induction (limited to range K+1) we obtain (5); By (1) using 6.5 proposition we infer (6) (Subproof below). (5) Consistent(JK) (6) Complete(JK) Subproof. According to (1) for an arbitrary formula '\\' EST & < K exists so that 4' = 'Px'. (3.2) yields '\\' E Ja+1 V '\\' E Ja+1. From x + 1 < K by (3.1-3.3) obviously Ja+1 C Jk, hence '\\' EJK V '-' ETK. '' E JK implies JK - '', hence JK H 'y' V JK - '4'. This confirms (6) 6.9 Theorem (Henkin) For a theory J a conservative extension J' and a mapping U CS ['x'] -> COPs' exists (note that COPE \u00a7 LEI), 'x' E VAR so that for each 'x' E VAR and '\u03c6' \u20ac &], ['x']: '(3x\u03c6 - \u03c6[x + co])' E J' and sign 'co' = sign 'x'. Conservative extension means Proof. (as in [SHO67], p.46) Starting with So = S we inductively define a sequence of extensions: from Sk we obtain Sk+1 by adding new constant symbols 'co', each for one '(' E [ ['x'] \\_1, 'x' E VAR (if k = 0 suppress '\\{\"_') and signs k+1 ,'Co' = signs 'x' if 'o' E Ls, ['x']. Let S' be the extension of S by adding { 'co' | (Ek ) ( 'p' E Ls, [ 'x'] A 'x' E VAR) } to component SOP and stipulating signs, 'Cp' = signs 'x' for 'p' E , ['x'] and 'x' E VAR; let T' = JU { '(Ex q > q[x + col)' | 'P' E Es ['x'] \\ 'x' E VAR}. 17"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 18,
        "page_content": "Claim. J' is a conservative extension of J: Assume (1) J'Is, '' and (2) '' EL. Using 6.4 compactness thm. on page 16 and 6.7 deduction thm. on page 16, as J'\\ TCES I, we conclude that there are '$1', ... 'I'm' E J' \\ J so that (3) J'Y1 > ... > Um > (' and '1' = '3x 0 > 0[x < ce]' By appropriate arrangement we may assume that ce does not appear in any other 4); (j = 2, .. , m), hence we may replace co by a new variable y so that (4) .. > Um > Q' applying well known logical rules and theorems we infer The antecedent 3y (3x 0 -> Ox) is a logical theorem (deducible from the variant theorem '3x 0 -> By oy'), hence we can detach it and obtain J- 42 >. > Um > ('. Iterated application finally yields J - '' 6.10 Definition For Fnl1 Structures m, o EL, and J CL, we define: (1) (V\u1ee0 E VSRT* ) (V\u0168 E VAR; ) (2) MT (V'O' ET) m'Q' (3) For (1) we say It is a model of (or mt satisfies) 'o', this also applies to (2) w.r.t. J. We write | for Is as long as only one S is considered. 6.11 Observation If the premises of 4.8 on page 10 apply to m, n then Mt bs and nare interchangeable. This applies to It = m of 4.9 as well. Semantics can be reduced to a notion of full structure as m, characterized by my = in place of conditions 4.1(3) on p. 7. 7 Obtaining a Model of a Consistent Theory 7.1 Extension Theorem Assume J is a consistent theory of signature S (technically Fnl1 Signat S A J CL5 A Consistent(J), then a so called complete and consistent Henkin theory J' exists, which is an extension of J. That is, in the sequel we shall rely on the following conditions: 18"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 19,
        "page_content": "(1) TJ', ' (2) SES', the components SRTs', VSRTS', SRTS of signature S' agree with those of S, only SOP and COP differ. (In the sequel we shall omit the subscripts for those components that agree) (3) Completes , (J'). (4) There is a map 'p' + 'C' : U [],['x'] > COPS, that assigns to each 'p' E [],['u'] (formula with at least one free variable 'u' ) the so called special con- 'x' E VAR stant 'Co' so that J'- 'Sauc -+ plu + co]' and signs, 'u' = signs, 'co' = 'a' Proof. Use 6.9 on page 17, then for the resulting J' apply 6.8. The second extension does not cancel the qualities achieved with the first. Now we consider three consequences of 7.1 that shall be prerequisites for investi- gations related to a term-structure built upon S' and J'. 7.2 Lemma If J' is a Henkin theory due to 7.1(4), ( E L\"[Z], Z E VARp, PE VSR\u2122 and all components of z are different then there are special constants 'ci' E COPpi (i : 1 . . r) so that for c = (ci):1.r: J' H 'plz + d => vzo' Proof. For 'O' ELT['x'], 'd' = 'C-(' by 7.1(4) }' } '[x ] > Vx Q'. In- stances of such theorems are '(40 > >1)', ... , '(Vr-1 > vr)', where each 'i' = 'VZ1 ... Vzi (Q[zi+1 +Ci+1] ... [zr < C+])'. Transitivity of implication yields J'- 40> \\', according to lemma 5.11 on page 13 '\\0' = '[z] < c] ... [z] > c+]' = '{[z + c]', hence J' H 'p[Z { c] > Vz\u0119' 7.3 Lemma Assume J' due to 7.1(4), 8 E VSRT u, VE VARZ 'a' E Ly[u] 'b' E Ly [v] and no component of u or v occurs more than once. If (vd e L l ) J' + 'a[u \u2190 d] = b[v \u2190 d]' and if z = < 'zi' ) :1.e E VARg is such that each 'zi' is different from the members of u and v and neither occurs in 'a' nor in 'b' , then ' - 'vza[u \u2190 z] = b[v \u2190 z]' Proof. Let 's' = 'a[ < z]' and ' = 'b[v < z]'. Our supposition for z implies that '[\u016b + z][Z + d]' operates exactly like '[\u016b + d]' , hence 's[Z + d]' = 'alu + d]' and '[z < d]' = 'b[v < d]'. Premise J' |- 'a[ < d] = b[v < d]' then yields J'+ '[z] = >[z ]', by 5.6 def. this is (*) J'- '(t = s)[z < d]' for arbitrary d E Lg. Now we are ready to use 7.2, the lemma that provides special constants c = {'c;'>j:1. (each 'C;' E COPS; ) so that J' |- '(t = s)[z < c] > Vz t = s', detachment with (*) yields J' 'Vz t = s', recalling the definition of 's' and 't' this is y' 'Vz b[v \u2190 z] = a[u \u2190z]' 7.4 Lemma Assume T' due to 7.1(4), persp.GP and persp.GP* with \u016b = u* = (). persp.GP* denotes the change of all symbolic parameters except 'op', m and ri by appending a star-superscript performed on persp.GP (as new names for corresponding 19"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 20,
        "page_content": "but possibly different things are required). If (Vi : 1 .m ) (VE [3 ] ) J' | 'a{[v] < s] = a[v] < 5]' then J' |- 'e* = e' Proof. Applying the preceding lemma to the last premise yields (Vi : 1 .. m) J' Vz av \u2190 zi] = ai[vi \u2190zi]' (by appropriate choice of zi E VARp;). Now we are ready to use equality axioms (page 14). Iterated application of (12) yields the chain of equations op(P1, P2, . .. , Pm) = op(Q1, P2, . .. , Pm ) = . . . = op(Q1, ... , Qm) where 'Pi' = '[(vt): ] at' and 'Qi' = '[(vi): ] ai'. From (14) transitivity we obtain J' | 'L = R' with if ri>0 if ri>0 'L' = 'op(P1, .. . , Pm)' = 'op( ... , [(v; ) : ] at, ... )' = 'e*' and 'R' = 'op(Q1, ... , Qm)' = if ri>0 if \u012b\u00a1>0 if ri>0 'op( ... , [(vi) : ] ai, ... )' = 'op( ... , [(vi): ] ai, ... )' = 'e', hence J' | 'e* = e'. 7.5 Definition (norm of closed expressions) Assume Fnl1 Signat S' , J' CL5. For each y E SRT and 'e' E ', the norm 'e' is defined as follows: If y = It then if J' [ 'e' then 'e' = 'Y' otherwise 'e' = '/'. If Y # Tt then we rely on an ordinal enumeration of Lyl and define 'e' to be the first within the subset { 'a' E Ly | J' - 'a ' e' }. w.r.t. this enumeration. 7.6 Proposition Let Fnl' Signat S', J' C ET, , Y E SRT \\ {} and 'e', 'e1', 'e2' E Lyl then (1) J'- 'e\" e' (2) J'- 'e1 e2' + 'e' = '2' (3) 'p' EST A Completes (J') { J''' 'Q' = 'r' Proof. immediately from the preceding definition. 7.7 Definition (term structure) Let J' be a complete and consistent Henkin theory, i.e. we presuppose the conditions of 7.1 except (1) for J'. We define the term structure & as a function on SRT U (SRT \u00d7 VSRT*) U SOP. As we now consider only one signature (S', that of J' and do not refer to J and S) we shall omit subscript S'. (1) ( YESRT ) \u20ac(v) - A = {'e' | 'e' E Ly [} (2) ( YESRT, \u1ede \u20ac VSRT* ) *(Y, o) = = 20 (3) ( 'op' E SOP, sign 'op' = (Y, a, B) ) If m = 0 x'op' = 'op' If m \u00a5 0 op' = {a, 'e'> | a = (a):1.m \u20ac | \\ \\ ] ] v (i)-(iv)} i:1 .. m if l = 0 } if l \u00a50 {f | (Ju E VAR& ) (3'e' E Ly [u] f = \u20b9(\u1ee1) > \u20ac(y) c H 'e[\u016b + d]' (i) a = {'a')i E II [x[vi] (ii) V = (Vi)i E II VAR i:1 .. m i:1 .. m 20"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 21,
        "page_content": ". , (iv) 'e' = 'op( ... , [(vi): ] ai, . . . )' if ri>0 if ri = 0 (iii) (Vi : 1 .. m) ai = { [=(Bi) > b + 'ai [vi + b]' if ri \u00a50 7.8 Remark (i)-(iv) in 7.7(3) imply persp.GP with \u016b = () 7.9 Proposition Fnl1 Structures x (Def. s. 4.1 on page 7) Proof. We show that the laws of Def. 4.1 on page 7 apply to & (in place of M) refer- ring to them with the numeration used in that definition. We rely on lemmas 5.7 to 5.11 and Def. 7.7 on page 20 of x. For (1) and (3.1) there is nothing to prove. Our first goal is to prove validity of (2), this only requires verification that & 'op' is a function if m 0. We refer to 7.7(3), case m # 0 (def. of x 'op'). The goal is then reduced to the task of deduction from the premises (a, 'e') E 'op', (a+, 'e') { } 'op' and a* = a to the conclusion 'e' = 'e'. Subproof (Sketch). By expansion of 1st and 2nd premise according to 7.7(3)(case m = 0) we obtain (i)-(iv) of 7.7(3) and a starred isomorphic variant (i)* - (iv) *. By 7.8 remark we succeed to persp.GP and persp. GP* with \u016b = u* = (). Still one condition lacks to use 7.4 lemma. From premise a* = a and expanding (iii) of 7.7(3) we obtain equations 'at [v] < b]' = 'a{[vi < b]' for each b E $3. These equations can be transformed into theorems of J' according to 7.6(2) and then generalized by 7.6(1) to apply to each b E L; I, so that finally 7.4 can be used to deduce J' ( 'e* = e'. To present this in detail: 7.6(2) yields y' 'a[v \u21906] = ai[vi \u2190b]' for b E Xp \u00b7 Taking into account, that 'd ' E Lp; l implies 'd ' E Xp; ; we obtain (Vd E Lp;) ' - 'a [vid] = ailvi - d]' . Referring to 7.6(1): J' - 'dj = dj' by virtue of 5.16 corollary (equality rule) on page 15 we may replace each 'dj' by 'dj', hence d by d and are ready to apply 7.4, that yields J' - 'et = e' and by 7.6(2) 'e*' = 'e' [(2). We turn to the completion qualities. Next goal is (3.2 a) cstw & # for w E Ay. Subproof. Suppose w E y, then (apply- ing (1) of 7.7) w = 'e' for some 'e' E Lyl, by 5.3 on page 10 frV 'e' = \u00d8, hence by 5.7 on page 11 'e' = 'elu < c', then cstv = cstore = 2 } 'elu + c]' , that is cst\u016b E x due to (2) of 7.7 Def. (3.2 a). Next goal is (3.2 b) pjo \u2018Ci Subproof. Let c = {'ci' ) i:1 .. 1. If we apply 5.6 Def., case m = 0, 'op' \u20ac [x], per- form a substitution such that the second condition of case changes into 'uj' E Lu] and use 'c' = 'c' (as 'c' & o; { {'e' | 'e' E Lo;}), then we obtain pj = \u0386\u03c3; . This matches the pattern of 7.7 (2) for pje \u20ac 30, [(3.2 b). Next goal is (3.3) \u00bf = {'c' ); & # 1 g = > 9 \u20ac . Subproof. Applying 7.7 we can 21"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 22,
        "page_content": "replace the 2nd premise by g = I Kop > - If we replace g in (3.3) by the right hand term, it only remains to show: if X E VAR , y E VARp, 'e' E Ly[xy] and 1 c = {'c') :1 .. (r) { *}, then g= = a > 'e[xy < cap \u20ac Ky. The expression for ga must be transformed in such a manner that it matches the pattern of f in 7.7(2) on p. 20. This is achieved by aid of lemma 5.9 : 'e[x] + cd]' = 'e[x] + cy][] + []'. Substitution yields g- = 1 a > 'e[xy < cylly < a]' According to 7.7 (2) then ga E (3.3). Next we show (3.4). Outline: It requires inheritance of the quality 35 of a map A> Ay, when composition of such maps with {'op' due to 4.1 definition (3.4) (p. 7) is performed. Quality to applies to h: > { if h can be defined by an expression 'e' as a substitution mapping c > 'e[x < c]'. To show this inheritance we start from 7.7(3), compare the terms that arise with those obtained from quality xavi applied to hic. The goal that the composed map c >> top'(., hic, ... ) belongs to # is achieved if we find an 'e' E Ly so that 'op'(., h;c, ... ) = 'e[x < c]' . The solution will be quite natural 'e' = 'op( ... , [(vi): ] ai, . . . )' . if ri>0 Subproof of (3.4). From the premises (pl)-(p4) we infer (-) below. (pl) m > 0, l > 0 (p2) 'op' E SOP, sign 'op' = (Y, a, B) Letter i is understood to be bound by (Vi : 1 .. m ) ... in subsequent context. (p3) g; E #2, that is owing to 7.7 (2), case { > 0 : % =| cpi + 'ai [xvi < cbj]' with a; E La; [xvi] xBi where gia = Our goal is to show (-) c + Top'(. .. , hic, ... ) \u20ac . We now turn to conclusions from (p1-p4). \u00c6\u00df; b\u1ecb > 'ai [xvi + cbj]' (p4) if ri = 0 then hi = gi else hi = CH gic 00 . (p5) 'ai[XV; \u2190 cbi]' = 'ai[Xvi \u2190vi][vi \u2190 bi]' (according to 5.9 lemma). From p4+p5 we infer (p6) hic = Jg;c=\u2018ai[x+c]' if ri = 0 (giz: bi \u2192 'ai[xvi \u2190 cbi][vi \u2190 bi]' if ri \u00a5 0 In order to verify (-) we look at 7.7 (2) Def. x. It requires transforming of x'op'( ... , hic, ... ) into an expression of shape 'op( ... ,?, ... )' . This can be achieved by application of 7.7 (3) if we find a substitute of \"?' so that x'op'( ... , hic, ... ) = 'op( ...?... )' . We have to show (-) {}{c) i:1 .. m , 'op( ...?... )'> \u20ac \u20ac'op' for some '?'. We observe the following correspondence of terms in 7.7 (3) and those from our current Situation: (if ri = 0) (if ri > 0) 'op( .. . , [(vi): ] ai, . . . )' if ri>0 7.7(3): a 'ai' 'ai[vi < b]' Situation: hic 'ai[x + c]' 'ai[xvi < cbj]' 'op( ... , ?, . . . )' This makes evident what to be substituted for '?' in (-): only '[(vi) : ] a[x < c]' if ri>0 22"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 23,
        "page_content": "may be considered. The problem is now reduced to showing -) (for ri > 0 CE F& b; E Ap ) 'a[xvi + cbj] = 'a{x < c][vi ~ bi]' As x& C Lol, this equation is supplied by 5.11 lemma, but only if [x] n [vi] = \u00d8. We can achieve this requirement by renaming the variables vi using equality axioms (12) of 5.12 on page 14, namely the following instance: (p7) Vwi ai[vi + wi] = ai[vi + dillq; < wi] > if ri>0 > op(A, [(vi): ] ai, [) = op(4, [q;) : ] a[v] < qi], [) if ri>0 (in place of 'b' at 5.12 now 'a{[vi < qi]'). If we choose w; and qi so that the variables of the sequences vi, wi and qi are pairwise disjoint, then also 'a{[vi < wi]' = 'ai[vi < qi][q; < w;]' and the antecedent of p7 can be detached on account of axiom (11). We are now supplied with if ri>0 IT 'op(\u25b3, [(Vi): ] ai, r) = op(\u25b3, [(qi): ] ai[v; \u2190 qi], r)' if ri>0 and due to 7.6(2): IT, 'e1 = e2' <> 'e1' = 'e2' we can interchange the two terms (left and right side of equation) within the considered context and the requirement for applicability of 5.11 will be provided. Hence without loss of generality we can assume the required condition for x and vi, too. This confirms (- -) and through the chain (!) -> ( !! ), ( !! ) -> (!) we succeed to (-). [ [(3.4) To check (4) of 4.1 Def. that xx is a Boolen algebra with two elements, whose operations are the x-values of certain logical connectives: this can be seen from 7.7 Def. of term structure together with 7.5 Def. of norm and simple instances of propositional tautologies as e.g. 'I v Y \" r' (note \" is '<>'). Finally check (5): From 7.7 Def. \u20ac, special case 'op' = '', only to consider case ri = 0, we obtain 'Y' ( 'a1', 'a2') = 'a1 - a2' and have to show 'a1 ~ a2' = 'Y' if 'a1' = 'a2' otherwise = '\\'. This follows from 7.6(2) 'a1' = 'az' if ' ' a .(1) ... if ='' 7.10 Theorem Assume & is the term structure of J' due to Def. 7.7, o = (vi) i:1 ... \u20ac VSRTe , X = { 'x;'> i:1 ... E VAR~, then if l = 0 ( 'e' ELY[x] ) 'e' x(x) = L 'e' x () = 'e' s > 'e[x < s]' if ( \u00a50 Proof. We assume 'e' E Ly[X] and persp.GP (ref. 4.5 on page 9, 7.7 and 4.6 on page 9), w.r.t. 4.6 substitute 'e' x (x) for 'e' m (u)). Case & # 0: The goal is to show Case l = 0: Can be treated like the other case. (-) 'e' x (x)(s) = 'e[x < 5]' for S' E , (note that x, \u00a7 Lol) We shall evaluate the left side of the equation according to 4.6 Def. of interpretation and the right side due to 5.6 and utilize from the induction premise that the law to be shown already applies to the argument terms 'ai' until left = right becomes evident. 23"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 24,
        "page_content": "Case m = 0: From 'e' E Ly[X], by 4.5 on page 9, 5.1 on page 10 and the supposed persp.GP we obtain 'e' = 'op' E SOP U [x]. First consider case 'e' = 'op' \u20ac [x]. left: According to 4.6 (Def. interpretation) 'e' x (x) (s) = pj\u016b = 'sk'. right: 5.6 yields 'e[< < 5]' = 'Sk'. For both left and right k is defined to be the biggest so that 'X' = 'e'. 'SK' E fok implies 'Sk' = 'Sk', hence 'e[< < s]' = 'Sk'. (-) is evident. Now consider the other case 'e' = 'op' E SOP. left: by 4.6 'e' x (x) = csto. x'op\", then 'e' x(x)(s) = x'op' = 'op' = 'e' right: by 5.6 'e[x + s]' = 'op' = 'e' Case m \u00a5 0: We rely on our induction hypothesis: 'a' x (Xvi)(sb) = 'a{[xvi < sbi]' and observe 'e' = 'op( ... , [(vi) : ] ai, .. )'. right: 'e[x < s]'. left: According to 4.6 if ri>0 (Def. interpretation) 'e' x(X) = 'op'(h;5)i:1 ... ) with hi: > > #x, so that for arbitrary S' E xx if ri = 0 then hi = 'ai'x (x)(s) induction hypothesis yields else h\u1ecb b 1010 TI H 'ai' x (xvi )(sb) \u00c8xi 1 (i) if ri = 0 then hi = 'ai[x + s]' else b H i [xvi + 5b] h\u1ecb = In order to apply 7.7(Def. x) we transform the equation next to label \"left: \" into {his):1 .. m , 'e' x(X)(s) E 'op' and in order to distinguish already used sym- bols (meta variables) from corresponding ones that may denote different objects we supply the one with star as superscript. Applying 7.7(3) in this way we obtain L'op': II xB. > ty and that there are a+, v*, 'e' so that v* = (vi) :1.m , a* = i:1 .. m {'a{'):1 ... , each v\u1ecb E VAR3; , each 'at' E La[v] and (as (hi); substitutes a) (ii) if ri = 0 then hi(s) = 'at' else hi(s) = \u20ac3 : > b > 'at [v < b]' , finally 'e*' = 'op( ... , [(vt ): ] at, ... )' and 'e' x (x)(s) = 'e'. Note that each starred if ri>0 metavariable depends on parameter s. Our goal is to deduce 'e*' = 'e[x < s]'. To achieve it we try to obtain the premises suited for an application of 7.4 lemma. Combining (i)+(ii) yields if ri =0 then 'ai[\u2190s]' = 'a ' else (vbE Xp; ) 'ai[xvi \u21905b]' =\u2018qq[v\u2190b]' Note that case ri = 0 can be treated like the other case, as 'a{ [() { {}]' = 'a{' is stipulated by 5.6 def., 7.6 yields T' - 'ai [xv; \u2190sb] =aq[v \u2190b]', by 5.9 'ai[vi \u2190 sb]' = 'ai[Xv; \u2190 svi][vi \u2190 b]' hence (iii) (b E XB ) ' 'ai xvi \u2190svi][vi \u2190b] =a+[v \u2190b]' This is the prerequisite for applying 7.4 which yields the required 'e*' = 'e[x < s]' . 7.11 Observation J'Y' = 'r' = 13 \u7b11 \u2018 \u4eba \u2019=\u2018 \u4eba \u2019=09 24"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 25,
        "page_content": "7.12 Observation If J CLn, 'O' ER the \" ' > '' 7.13 Theorem Assume the premises as in 7.10, let y = Tt and 'o' E La[x], then (1) J'F 'p' W 'q'x() = 'Y'= 198 (2) J'H '' + (VaEx. ) '.'x(x)(a) = 'Y' =1; if n 0 (3) if n = 0 (n\u2265 0) Proof. The two preceding observations and application of 7.10 and 7.6 yield this result. 7.14 Observation Let J be a consistent theory and J' its extension due to 7.1 on page 18 (extension theorem). If & is a model of J' then the restriction S 1 x of & to the signature S [ S' is a model of J, that is: 7.15 Completeness Theorem (2nd Version) A consistent Fnl1 theory has a model. Fnl1 Signat S A J CET A Consistent(J) -> (= Fnl1 Structure ) Mts Proof. This is a consequence of 7.1,7.7,7.13,7.14 according to 6.10. 7.16 Completeness Theorem (G\u00f6del) Any formula that is valid in a Fnl1 theory is provable in it, that is Fnl1 Signat S A TU {'p'} { '' '' Proof. Js 'o' iff JU{'-q'} has no model Ths 'P' iff - Consistent(JU {'-q'}) Use 7.15 with JU { '-Q'} in place of J, then the first 2 premises of the theorem imply Consistent(JU {} > (3) } {{} by propositional tautology according to the first two lines of the proof Remarks. The construction of a term model could be carried out also with a theory J', if the requirement of 6.9 on page 17 (or 7.1 on page 18 respectively) is weakened by rewriting Copy, into Ly, I (note that Copy, C Er,1). We then say J' admits examples. If we prove the validity of Hilbert's 2nd E-Theorem for Functional Logic, which claims J' to be a conservative extension of J, if the new symbols are Ey with signature 'y((Y) : Tt)' for each Y E VSRT and the additional axioms are (80) and (82) as defined in [LEI69] (but actually multiplied by indexing range VSRT), then J' admits examples and inherits consistency from J. We observe that 25"
    },
    {
        "filename": "9503206.pdf",
        "page_number": 26,
        "page_content": "(2) Vz(\u03c6\u03c7 - \u03c8y) -> \u03b5\u03c7.\u03c6 = \u03b5y.\u03c8 is accurately the equality ax. (12) for the symbol '&' = '{' (see p. 14 and remember that \">' is the same as ''). (\u03b5\u03bf) \u039e\u03c7 \u03c6 - \u03c6[x -- \u03b5\u03c7.\u03c6] is a nonlogical axiom, which makes J' admit examples. Thus J' with only one new symbol for each y E VSRT would be equally suitable for constructing a term model. Yet proving Hilbert's 2nd E-Theorem (ref. to [LEI69]) for this purpose is considerably more difficult and largescale than Henkins approach. References [ASS57] G. ASSER. Theorie der logischen Auswahlfunktionen. Zeitschrift f\u00fcr mathematische Logik und Grundlagen der Mathematik, 3:30-68, 1957. [BAR77] Jon BARWISE. An Introduction to First-Order Logic. In Handbook of Mathematical Logic, volume 90 of Studies in Logic and the Foundations of Mathematics, chapter 4. The Completeness Theorem, pages 22-40. North-Holland, 1977. [CHR93] C. CHRISTIAN. Allgemeiner Korrektheits uns Vollst\u00e4ndigkeitssatz f\u00fcr maximal konsistente Kalk\u00fcle. Sitzungsberichte der \u00d6sterr. Akademie d. Wissenschaften, Mathematisch-naturwissenschklasse, II, Bd. 202, Heft 1-10:23-45, 1993. [G\u00d6D30] Kurt G\u00d6DEL. Die Vollst\u00e4ndigkeit der Axiome des logischen Funktionenkalk\u00fcls. Monatshefte f\u00fcr Mathematik u. Physik, 37:349-360, 1930. [HB44] HILBERT, D. and BERNAIS, P. Die Grundlagen der Mathematik. Berlin (Reprinted Ann Arbor. Mich.), 1,2, 1934,1939,(1944). [HEN49] Leon HENKIN. The completeness of the first-order functional calculus. J. Symb. Logic, 13:159-166, 1949. [HIL23] D. HILBERT. Die logischen Grundlagen der Mathematik. Mathematische Annalen, 88:151-165, 1923. [HIL28] D. HILBERT. Die Grundlagen der Mathematik. Abh. Math. Seminar Hamburg, 6:65-85, 1928. [KEI70] H.J. KEISLER. Logic with the quantifier \"there exist uncountably many\". Ann. Math. Logic, 1:1-93, 1970. [LEI69] A.C. LEISENRING. Mathem. Logic and Hilbert's Epsilon-Symbol. MACDONALD & CO, London W.1, 1969. [RAS56] H. RASIOWA. On the E-theorems. Fundamenta Mathematicae, 43, 1956. [SHO67] J.R. SHOENFIELD. Mathematical Logic. Addison-Wesley, Reading, Mass., 1967. 26"
    }
]